#include <iostream>
#include <vector>
#include <string>
#include < cassert>
#include <windows.h>
using namespace std;

class User {
	string username;
	string password;
	string name;
	string surname;

public:
	User()
	{
		username = "";
		password = "";
		name = "";
		surname = "";
	}
	User(string username, string password, string name, string surname)
	{
		SetUsername(username);
		SetPassword(password);
		SetName(name);
		SetSurname(surname);
	}
	User(const User& other)
	{
		this->SetUsername(other.username);
		this->SetName(other.name);
		this->SetSurname(other.surname);
		this->SetPassword(other.password);
	}
	User& operator=(const User& other)
	{
		this->SetUsername(other.username);
		this->SetName(other.name);
		this->SetSurname(other.surname);
		this->SetPassword(other.password);
	}

	string GetUsername() const { return username; }
	string GetPassword() const { return password; }
	string GetName() const { return name; }
	string GetSurname() const { return surname; }

	void SetUsername(string username)
	{
		if (username.length() < 6 || username[0] < 65 && username[0] > 92)
			assert(!"InvalidUsername");
		this->username = username;
	}
	void SetPassword(string password)
	{
		if (password.length() < 6)
			assert(!"InvalidPassword");
		this->password = password;
	}
	void SetName(string name)
	{
		if (name.length() < 4)
			assert(!"InvalidName");
		this->name = name;
	}
	void SetSurname(string surname)
	{
		if (surname.length() < 4)
			assert(!"InvalidSurname");
		this->surname = surname;
	}
	void show() const
	{
		cout << endl;
		cout << "Username: " << username << endl;
		cout << "Password: " << password << endl;
		cout << "Name: " << name << endl;
		cout << "Surname: " << surname << endl;
	}
};

class Database {
	User** users;
	int user_count = 0;
public:

	void addUser(const User& user)
	{
		if (user_count == 0)
		{
			users = new User * [++user_count];
			users[0] = new User(user);
		}
		else
		{
			User** NewUsers = new User * [user_count + 1];
			for (size_t i = 0; i < user_count; i++)
			{
				NewUsers[i] = users[i];
			}
			NewUsers[user_count] = new User(user);

			delete[] users;
			users = NewUsers;
			user_count++;
		}
	}
	User& getUserByUsername(string username)
	{
		for (size_t i = 0; i < user_count; i++)
		{
			if (users[i]->GetUsername() == username)
			{
				return *users[i];
			}
		}
		assert(!"Tapilmadi");
	}
	void updateUser(User& olduser, const User& newuser)
	{
		for (size_t i = 0; i < user_count; i++)
		{
			if (users[i]->GetUsername() == olduser.GetUsername())
			{
				*users[i] = newuser;
				return;
			}
		}
		assert(!"Tapilmadi");
	}

	User** GetUsers() { return users; }
	int GetUserCount() { return user_count; }
};

class Registration {
	Database _database;
public:
	Registration(const Database& database) {
		_database = database;
	}


	//eger bu username istifadechi yoxdursa error atsin
	//eger username varsa amma password yanlishdirsa error atsin
	void signIn(string username, string password)
	{
		bool IsCheck = false;
		for (size_t i = 0; i < _database.GetUserCount(); i++)
		{
			if (_database.GetUsers()[i]->GetUsername() == username)
			{
				if (_database.GetUsers()[i]->GetPassword() == password)
				{
					cout << "Access Succesfull" << endl;
				
				}
				else
					assert(!"Password is not found");
			}
			else 
				assert(!"Username is not found");
		}
	}


	//Eger istifadechi varsa hemen username de throw DatabaseException
	//Eger username xarakter sayi 6 dan kichikdirse InvalidArgumentException
	//Eger username ilk herf kichikdirse InvalidArgumentException
	//Eger password xarakter sayi 6 dan kichikdirse InvalidArgumentException
	//Eger name xarakter sayi 4 dan kichikdirse InvalidArgumentException
	//Eger surname xarakter sayi 4 dan kichikdirse InvalidArgumentException
	void signUp(string username, string password, string name, string surname)
	{
		for (size_t i = 0; i < _database.GetUserCount(); i++)
		{
			if (_database.GetUsers()[i]->GetUsername() == username)
				assert(!"Users have already username like this");
		}
		User test(username, password, name, surname);
		_database.addUser(test);
	}

	void allusers()
	{
		for (size_t i = 0; i < _database.GetUserCount(); i++)
		{
			_database.GetUsers()[i]->show();
		}
	}
};

class System {
public:
	static void Control() {
		Database db;
		Registration twitter(db);


		int secim;
		while (true)
		{
			cout << "Secim: ";
			cin >> secim;
			cin.ignore();

			if (secim == 1)
			{
				twitter.allusers();
			}
			else if (secim == 2)
			{
				string username;
				string password;
				cout << "USername: ";
				getline(cin, username);
				cout << "Password: ";
				getline(cin, password);
				twitter.signIn(username, password);
			}
			else if (secim == 3)
			{
				string username;
				string password;
				string name;
				string surname;
				cout << "USername: ";
				getline(cin, username);
				cout << "Password: " ;
				getline(cin, password);
				cout << "name: " ;
				getline(cin, name);
				cout << "surname: ";
				getline(cin, surname);

				twitter.signUp(username, password, name, surname);

			}

			else if (secim == 0)
			{
				cout << "Exited" << endl;
				break;
			}
			else
			{
				cout << "Secim yanlisdi" << endl;
			}
		}


		// 1. All users
		// 2. Sign in
		// 3. Sign up
		// 0. Exit
	}

};

void main() {
	System::Control();
	system("pause");
}

